package com.microsoft.playwright.tools;

import com.microsoft.playwright.Playwright;

import java.io.File;
import java.io.FileWriter;
import java.nio.file.FileSystems;

/**
 * This class is designed for automatically generating the {@code enum}
 * of all devices names that Playwright can simulate, be convenient to use for end caller.
 */
public class DeviceEnumGenerator {

  private static final String COPYRIGHT = "/*\n" +
    " * Copyright (c) Microsoft Corporation.\n" +
    " *\n" +
    " * Licensed under the Apache License, Version 2.0 (the \"License\");\n" +
    " * you may not use this file except in compliance with the License.\n" +
    " * You may obtain a copy of the License at\n" +
    " *\n" +
    " * http://www.apache.org/licenses/LICENSE-2.0\n" +
    " *\n" +
    " * Unless required by applicable law or agreed to in writing, software\n" +
    " * distributed under the License is distributed on an \"AS IS\" BASIS,\n" +
    " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" +
    " * See the License for the specific language governing permissions and\n" +
    " * limitations under the License.\n" +
    " */\n" +
    "\n";

  private static final String TWO_SPACE_FOR_INDENT = "  ";

  public static void main(String[] args) throws Exception {
    File cwd = FileSystems.getDefault().getPath(".").toFile();
    String packageName = Playwright.class.getPackage().getName();
    String packagePath = packageName.replace(".", "/");
    File file = new File(cwd, String.format("playwright/src/main/java/%s/Device.java", packagePath));
    FileWriter writer = new FileWriter(file);
    writer.write(COPYRIGHT);

    String declaration = "package " + packageName + ";\n" +
      "\n" +
      "/** DO NOT EDIT this file, it's generated automatically when running 'generate_api.sh'. */\n" +
      "public enum Device {\n" +
      TWO_SPACE_FOR_INDENT + "/* Generated */\n";
    writer.write(declaration);

    Playwright playwright = Playwright.create();
    StringBuilder enums = new StringBuilder();
    playwright.devices().keySet().stream().sorted().forEach(name -> {
      String enumConstName = name.toUpperCase()
        .replace("(", "")
        .replace(")", "")
        .replace(" ", "_");
      enums.append(TWO_SPACE_FOR_INDENT).append(enumConstName).append("(\"").append(name).append("\"),\n");
    });
    final int indexOfLastComma = enums.length() - 2;
    enums.replace(indexOfLastComma, indexOfLastComma + 1, ";\n");
    writer.write(enums.toString());

    String constructor = TWO_SPACE_FOR_INDENT + "private final String deviceName;\n\n" +
      TWO_SPACE_FOR_INDENT + "Device(String deviceName) {\n" +
      TWO_SPACE_FOR_INDENT + "  this.deviceName = deviceName;\n" +
      TWO_SPACE_FOR_INDENT + "}\n" +
      "\n" +
      TWO_SPACE_FOR_INDENT + "public String deviceName() {\n" +
      TWO_SPACE_FOR_INDENT + "  return deviceName;\n" +
      TWO_SPACE_FOR_INDENT + "}\n" +
      "}\n";
    writer.write(constructor);

    writer.close();
    playwright.close();
  }

}
